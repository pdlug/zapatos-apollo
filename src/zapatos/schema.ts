/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v0.1.56), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 George MacKerron
Released under the MIT licence: see LICENCE file
*/

import type {
  JSONValue,
  JSONArray,
  DateString,
  SQLFragment,
  SQL,
  GenericSQLExpression,
  ColumnNames,
  ColumnValues,
  Parameter,
  ParentColumn,
  DefaultType,
} from './src/core';

import * as c from './custom';


/* === schema: public === */

/* --- enums --- */


/* --- tables --- */

export declare namespace items {
  export type Table = 'items';
  export interface Selectable {
    id: string;
    owner_id: string | null;
    title: string;
    description: string | null;
    content: string | null;
    keywords: string[] | null;
    published_on: Date;
    created_at: Date;
    updated_at: Date;
    searchable_index: c.PgTsvector | null;
  }
  export interface Insertable {
    id?: string | Parameter<string> | DefaultType | SQLFragment;
    owner_id?: string | Parameter<string> | null | DefaultType | SQLFragment;
    title: string | Parameter<string> | SQLFragment;
    description?: string | Parameter<string> | null | DefaultType | SQLFragment;
    content?: string | Parameter<string> | null | DefaultType | SQLFragment;
    keywords?: string[] | Parameter<string[]> | null | DefaultType | SQLFragment;
    published_on?: Date | Parameter<Date> | DateString | DefaultType | SQLFragment;
    created_at?: Date | Parameter<Date> | DateString | DefaultType | SQLFragment;
    updated_at?: Date | Parameter<Date> | DateString | DefaultType | SQLFragment;
    searchable_index?: c.PgTsvector | Parameter<c.PgTsvector> | null | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'items_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export declare namespace schema_migrations {
  export type Table = 'schema_migrations';
  export interface Selectable {
    version: string;
  }
  export interface Insertable {
    version: string | Parameter<string> | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'schema_migrations_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export declare namespace users {
  export type Table = 'users';
  export interface Selectable {
    id: string;
    email: string;
    name: string | null;
    created_at: Date;
    updated_at: Date;
  }
  export interface Insertable {
    id?: string | Parameter<string> | DefaultType | SQLFragment;
    email: string | Parameter<string> | SQLFragment;
    name?: string | Parameter<string> | null | DefaultType | SQLFragment;
    created_at?: Date | Parameter<Date> | DateString | DefaultType | SQLFragment;
    updated_at?: Date | Parameter<Date> | DateString | DefaultType | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'users_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

/* === cross-table types === */

export type Table = items.Table | schema_migrations.Table | users.Table;
export type Selectable = items.Selectable | schema_migrations.Selectable | users.Selectable;
export type Whereable = items.Whereable | schema_migrations.Whereable | users.Whereable;
export type Insertable = items.Insertable | schema_migrations.Insertable | users.Insertable;
export type Updatable = items.Updatable | schema_migrations.Updatable | users.Updatable;
export type UniqueIndex = items.UniqueIndex | schema_migrations.UniqueIndex | users.UniqueIndex;
export type Column = items.Column | schema_migrations.Column | users.Column;
export type AllTables = [items.Table, schema_migrations.Table, users.Table];


export type SelectableForTable<T extends Table> = {
  items: items.Selectable;
  schema_migrations: schema_migrations.Selectable;
  users: users.Selectable;
}[T];

export type WhereableForTable<T extends Table> = {
  items: items.Whereable;
  schema_migrations: schema_migrations.Whereable;
  users: users.Whereable;
}[T];

export type InsertableForTable<T extends Table> = {
  items: items.Insertable;
  schema_migrations: schema_migrations.Insertable;
  users: users.Insertable;
}[T];

export type UpdatableForTable<T extends Table> = {
  items: items.Updatable;
  schema_migrations: schema_migrations.Updatable;
  users: users.Updatable;
}[T];

export type UniqueIndexForTable<T extends Table> = {
  items: items.UniqueIndex;
  schema_migrations: schema_migrations.UniqueIndex;
  users: users.UniqueIndex;
}[T];

export type ColumnForTable<T extends Table> = {
  items: items.Column;
  schema_migrations: schema_migrations.Column;
  users: users.Column;
}[T];

export type SQLForTable<T extends Table> = {
  items: items.SQL;
  schema_migrations: schema_migrations.SQL;
  users: users.SQL;
}[T];

